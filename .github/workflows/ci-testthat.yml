name: testthat

on:
  push:
    branches:
      - master
      - ghactions
  pull_request:
    branches:
      - master
  # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onschedule
  schedule:
    - cron:  '0 0 * * 1' # every monday at midnight
  repository_dispatch:
    types:
      - all
      - testthat
      - ci

jobs:
  testthat-apps:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false

      matrix:
        config:
        - { os: macOS-latest, r: '3.6'}
        - { os: windows-latest, r: '3.6'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}

    steps:
      - name: Windows git setup
        if: runner.os == 'Windows'
        run:
          git config --global core.autocrlf false

      - uses: actions/checkout@v2
        name: GitHub Pull ./apps
        path: apps

      - uses: actions/checkout@v2
        name: GitHub Pull ./apps
        if: github.event_name == 'repository_dispatch'
        with:
          repository: ${{ github.event.client_payload.apps_repo }}
          ref: ${{ github.event.client_payload.apps_repo_ref }}
          path: apps

      - uses: actions/checkout@v2
        name: GitHub Pull ./apps
        if: github.event_name != 'repository_dispatch'
        with:
          repository: rstudio/shinycoreci-apps
          ref: master
          path: apps

      - uses: r-lib/actions/setup-pandoc@master

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - name: R Options
        shell: bash
        run: |
          echo 'MAKEFLAGS=-j2' >> .Renviron

      - name: Create cache ID from time
        id: cache_id
        run: |
          echo "::set-output name=value::$(Rscript -e 'cat(as.numeric(Sys.time()))')"
      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-libs-shinytest-${{ steps.cache_id.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-r-${{ matrix.config.r }}-libs-shinytest-
            ${{ runner.os }}-r-${{ matrix.config.r }}-libs-rcmdcheck-

      - name: Install Packages
        run: >
          Rscript
          -e "if (.Platform[['OS.type']] == 'windows' || Sys.info()[['sysname']] == 'Darwin') options(pkgType = 'binary')"
          -e "update.packages(ask = FALSE, lib.loc = .libPaths()[1])"
          -e "if (system.file(package = 'remotes') == '') install.packages('remotes')"
          -e "remotes::install_local(dependencies = TRUE, force = TRUE)"

      - name: Install app deps
        run: >
          Rscript
          -e "if (.Platform[['OS.type']] == 'windows' || Sys.info()[['sysname']] == 'Darwin') options(pkgType = 'binary')"
          -e "shinycoreci::install_app_deps()"

      - name: Log platform and package information
        run: Rscript -e "shinycoreci::write_sysinfo()"

      # - name: Run testthat
      #   run: >
      #     Rscript -e "shinycoreci::test_testthat(dir = 'apps')"

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: testthat-results-${{ runner.os }}-${{ github.sha }}
          path: ./apps

      - name: Fix path for Windows caching
        if: runner.os == 'Windows'
        # This is needed because if you use the default tar at this stage,
        # C:/Rtools/bin/tar.exe, it will say that it can't find gzip.exe. So
        # we'll just set the path so that the original tar that would be
        # found, will be found.
        run: echo "::add-path::C:/Program Files/Git/usr/bin"
