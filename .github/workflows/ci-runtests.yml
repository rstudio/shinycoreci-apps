name: runTests

on:
  push:
    branches:
      - master
      - ghactions
  pull_request:
    branches:
      - master
  # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onschedule
  schedule:
    - cron:  '0 8 * * 0-4' # every work night (delayed 2 hrs)
  repository_dispatch:
    types:
      - all
      - shinytest
      - ci

jobs:
  shinytest-apps:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }}${{ matrix.shinycoreci.text }} (${{ matrix.r }})

    strategy:
      fail-fast: false
      # max-parallel: 3
      matrix:
        shinycoreci:
        - { branch: "master", text: ""}
        # - { branch: "CRAN", text: "-CRAN"}
        r:
          - "3.4"
          - "3.5"
          - "3.6"
          - "4.0"
        config:
        - { os: macOS-latest, cran: "https://cloud.r-project.org"}
        - { os: windows-latest, cran: "https://cloud.r-project.org"}
        - { os: ubuntu-18.04, cran: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest", release: bionic }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      GITHUB_PAT: ${{ secrets.GITHUB_PAT }}

    steps:
      - name: Windows git setup
        if: runner.os == 'Windows'
        run:
          git config --global core.autocrlf false

      - name: GitHub Pull (PR)
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          # check out the commit sha, not the merged sha. Avoids the "Merge SHA_A into SHA_B" into commits
          ref: ${{ github.event.pull_request.head.sha }}      # # Ref: https://github.com/actions/checkout/pull/115/files#diff-04c6e90faac2675aa89e2176d2eec7d8R203-R209
      - name: GitHub Pull (Branch)
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@master

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.r }}
      - name: R Options
        shell: bash
        run: |
          echo 'MAKEFLAGS=-j2' >> .Renviron

      - name: Create cache ID from time
        id: cache_id
        run: |
          echo "::set-output name=value::$(Rscript -e 'cat(as.numeric(Sys.time()))')"
      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.r }}${{ matrix.shinycoreci.text }}-libs-2-runtests-${{ steps.cache_id.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-r-${{ matrix.r }}${{ matrix.shinycoreci.text }}-libs-2-runtests-

      - name: Install curl
        if: runner.os == 'Linux'
        run: |
          sudo -s apt-get update
          sudo -s apt-get install -y libcurl4-openssl-dev
          Rscript -e "options(install.packages.check.source = 'no'); if (system.file(package = 'curl') == '') install.packages('curl', repos = 'https://cloud.r-project.org')"

      # make sure this is the latest
      - name: Install Packages
        if: runner.os == 'macOS'
        run: >
          Rscript
          -e "if (system.file(package = 'Rcpp') == '') install.packages('Rcpp', type = "source")"
      - name: Install Packages
        # if non linux, install binaries
        # make sure to get the best version number possible
        # If remotes isn't installed, install it
        # If shinytest isn't available, install the cran version to init the R library
        # install the specific branch of shinycoreci
        run: >
          Rscript
          -e "options(install.packages.check.source = 'no')"
          -e "update.packages(ask = FALSE, lib.loc = .libPaths()[1])"
          -e "remotes::install_github('rstudio/shinycoreci@${{ matrix.shinycoreci.branch }}', force = TRUE)"

      # Install ragg deps
      - name: Ragg deps
        if: runner.os == 'Linux'
        run: |
          sudo -s apt-get update
          sudo -s apt-get install -y libfreetype6-dev libpng-dev libtiff5-dev

      # Install xquartz
      - name: Mac systemdeps
        if: runner.os == 'macOS'
        run: |
          brew cask install xquartz

      # Install all deps as we are installing from rspm
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          Rscript -e "system(print(paste0('sudo -s ', shinycoreci::rspm_all_install_scripts('./apps', release = '${{ matrix.config.release }}'))))"

      # do not install apps deps, this will happen at run time
      - name: Install troublesome pkgs
        run: >
          Rscript
          -e "options(install.packages.check.source = 'no')"
          -e "if (system.file(package = 'ps') == '') remotes::install_cran('ps')"
      - name: Install CRAN Versions
        run: >
          Rscript
          -e "if (system.file(package = 'shiny') == '') install.packages(c('remotes', 'shinytest', 'plotly', 'shiny', 'httr', 'callr', 'tibble', 'sessioninfo', 'testthat', 'rmarkdown', 'rsconnect', 'shinytest', 'shiny', 'htmltools', 'httpuv', 'promises', 'later', 'htmlwidgets', 'reactlog', 'fastmap', 'websocket', 'plotly', 'crosstalk', 'flexdashboard', 'pool', 'leaflet', 'leaflet.providers'))"
      # - name: Install core packages
      #   run: >
      #     Rscript
      #     -e "options(install.packages.check.source = 'no')"
      #     -e "shinycoreci::install_exact_shinycoreci_deps(apps = c())"

      # The `github.sha` value is the commit sha as if the PR was merged. :-(
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows#pull-request-event-pull_request
      # Checking for the pull request sha and then pasting it to the possibly 'merged' sha.  If master branch, only the `.sha` exists. If a PR, the PR sha exists.
      #  Either way, take the first 7 characters.
      # Found `github.event.pull_request.head.sha` example here: https://github.com/actions/checkout/commit/cab31617d857bf9e70dc35fd9e4dafe350794082#diff-04c6e90faac2675aa89e2176d2eec7d8R92
      # The webhook payload example (equivalent to `github.event.pull_request`) shows the keys `head > sha` : https://developer.github.com/v3/activity/events/types/#pullrequestevent
      - name: Create short sha
        id: short_sha
        run: >
          Rscript
          -e "cat('::set-output name=sha::', substr(paste0('${{ github.event.pull_request.head.sha }}', '${{ github.sha }}'), 1, 7), sep = '')"
      - name: Create failure branch name
        id: failed_branch
        run: >
          Rscript
          -e "cat('::set-output name=name::', '${{ steps.short_sha.outputs.sha }}', '${{ matrix.shinycoreci.text }}', '-', format(Sys.time(), '%Y_%m_%d_%H_%M'), sep = '')"
      - name: Create GHA branch name (i.e., test run identifier)
        id: gha_branch
        run: >
          Rscript
          -e "cat('::set-output name=name::gha-', '${{ steps.failed_branch.outputs.name }}', '-', '${{ matrix.r }}',  '-', '${{ runner.os }}', sep = '')"

      - name: Find PhantomJS path
        id: phantomjs
        run: |
          echo "::set-output name=path::$(Rscript -e 'cat(shinytest:::phantom_paths()[[1]])')"
      - name: Cache PhantomJS
        uses: actions/cache@v1
        with:
          path: ${{ steps.phantomjs.outputs.path }}
          key: ${{ runner.os }}-phantomjs
          restore-keys: ${{ runner.os }}-phantomjs
      - name: Install PhantomJS
        run: >
          Rscript
          -e "options(install.packages.check.source = 'no')"
          -e "if (!shinytest::dependenciesInstalled()) shinytest::installDependencies()"

      ## do not update pkgs, as they were installed above
      ## do update app pkgs, as they have NOT been installed
      #- name: Run tests
      #  timeout-minutes: 120
      #  run: >
      #    Rscript
      #    -e "options(install.packages.check.source = 'no')"
      #    -e "run_tests_output <- shinycoreci::test_runtests(retries = 0, assert = FALSE, update_pkgs = FALSE, update_app_pkgs = TRUE)"
      #    -e "shinycoreci::save_test_results(run_tests_output, gha_branch_name = '${{steps.gha_branch.outputs.name}}', pr_number = '${{github.event.pull_request.number}}', username = '${GITHUB_ACTOR}')"
      #    -e "shinycoreci::assert_runtests(run_tests_output)"
      #
      #- name: Git config
      #  if: always()
      #  shell: bash
      #  # need to unset the extra header to allow for regular https push
      #  run: |
      #    git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com" && \
      #      git config --local user.name "${GITHUB_ACTOR}" && \
      #      git config --local --unset http.https://github.com/.extraheader && \
      #      git config --local --list
      #
      #- name: Push test files to rstudio/shinycoreci-apps
      #  if: always()
      #  shell: bash
      #  # git checkout -B -- Creates the branch <new_branch> and start it at <start_point>; if it already exists, then reset it to <start_point>.
      #  # git push --force -- JUST in case the prior branch existed
      #  run: |
      #    git checkout -B ${{ steps.gha_branch.outputs.name }}
      #
      #    git add zzz_shinycoreci && \
      #      git commit -m '`test_runtests()` output - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}' || \
      #      echo "No test_runtests() changes to commit"
      #
      #    git add apps/sysinfo-* && \
      #      git commit -m '`sysinfo` Changes - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}' || \
      #      echo "No apps/sysinfo-* changes to commit"
      #
      #    git add apps && \
      #      git commit -m '`shinytest` Changes - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}'|| \
      #      echo "No shinytest changes to commit"
      #
      #    git log -n 4 --pretty=oneline --simplify-by-decoration
      #
      #    # if any commits occured, then push to repo (compare to sha of current execution)
      #    echo "`git rev-list --count HEAD ^${{ steps.short_sha.outputs.sha }}`"
      #    if (( `git rev-list --count HEAD ^${{ steps.short_sha.outputs.sha }}` > 0 )); then
      #      git push --force https://schloerke:${{secrets.GITHUB_PAT}}@github.com/rstudio/shinycoreci-apps.git "HEAD:${{ steps.gha_branch.outputs.name }}"
      #    fi

      #- name: Push test results to rstudio/shinycoreci-apps
      #  if: always()
      #  shell: bash
      #  # Add saved test results (in _test_results/) to _test_results branch
      #  # (this assumes the _test_results branch already exists, which was setup manually like this
      #  # https://stackoverflow.com/questions/34100048/github-create-empty-branch)
      #  run: |
      #    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
      #    git fetch origin _test_results
      #    git checkout _test_results --
      #    git add _test_results/*
      #    git commit -m "Add test results for ${{steps.gha_branch.outputs.name}}"
      #    git push --force https://schloerke:${{secrets.GITHUB_PAT}}@github.com/rstudio/shinycoreci-apps.git _test_results
      #    git checkout $CURRENT_BRANCH


      - name: Fix path for Windows caching
        if: runner.os == 'Windows'
        # This is needed because if you use the default tar at this stage,
        # C:/Rtools/bin/tar.exe, it will say that it can't find gzip.exe. So
        # we'll just set the path so that the original tar that would be
        # found, will be found.
        run: echo "::add-path::C:/Program Files/Git/usr/bin"
