name: runTests

on:
  push:
    branches:
      - master
      - ghactions
  pull_request:
    branches:
      - master
  # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onschedule
  schedule:
    - cron:  '0 8 * * 0-4' # every work night (delayed 2 hrs)
  repository_dispatch:
    types:
      - all
      - shinytest
      - ci

jobs:

  pre_check:
    runs-on: ubuntu-18.04
    name: Pre runtests checks

    steps:
      - name: GitHub Pull
        uses: actions/checkout@v2

      - name: Validate all test files contain 'shinycoreci::test_*()'
        shell: bash
        run: |
          # find all files that don't contain a test function
          grep -L "shinycoreci::test_" ./apps/*/tests/*.R | \
            while read FIL; do
              if [[ "$FIL" =~ .*/169-.* ]]; then
                echo "skipping 169" > /dev/null
              else
                echo "Testing file '$FIL' does not contain a shinycoreci testing function."
                echo "See './apps/001-hello/tests' for examples"
                exit 1
              fi
            done
          echo 'Validated that test files contain shinycoreci::test_*()'

      - name: Validate all shiny jster based apps are integrated
        shell: bash
        run: |
          # find all app files that don't contain shinyjster parts
          find ./apps -name "shinyjster-*.R" |
            while read FIL; do
              if [[ "$FIL" =~ .*/169-.* ]]; then
                echo "skipping 169" > /dev/null
              else
                folder_up=`dirname $FIL`
                if [[ "`basename $folder_up`" -eq "tests" ]]; then
                  app_folder=`dirname $folder_up`

                  if grep -q -r $app_folder/*.R* -e "shinyjster_server("; then
                    echo "found regex" > /dev/null
                  else
                    echo "Testing app '$app_folder' did not contain 'shinyjster_server(' but contains a shinyjster test file"
                    exit 1
                  fi

                  if grep -q -r $app_folder/*.R* -e "shinyjster_js("; then
                    echo "found regex" > /dev/null
                  else
                    echo "Testing app '$app_folder' did not contain 'shinyjster_js(' but contains a shinyjster test file"
                    exit 1
                  fi
                fi
              fi
            done
          echo 'Validated that test files contain all shinyjster requirements'

      - name: Validate no shinytest `*-current` or `*-expected` folders exist
        shell: bash
        run: |
          for FOLDER in '*-current' '*-expected'; do
            find . -name "$FOLDER" > _folders_found.txt
            if [ -s _folders_found.txt ]
            then
              cat _folders_found.txt
              exit 1;
            fi
            echo "Validated that no shinytest $FOLDER folders exist"
          done

      - name: Collect changed file names
        if: github.event_name == 'pull_request'
        id: files_changed
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'

      - name: Validate >= 1 Shiny app file is altered
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          # It is possible that a file contains a space, use json to parse the array
          readarray -t FILES_CHANGED <<<"$(jq -r '.[]' <<<'${{ steps.files_changed.outputs.added_modified }}')"
          # maintain that the file names are quoted by using [@]
          echo Files modified or changed: $FILES_CHANGED
          for FIL in ${FILES_CHANGED[@]}; do
            echo "Inspecting file: '$FIL'"
            # check if path is in apps
            if [[ "$FIL" =~ ^"apps" ]]; then
              SUBFIL=$(echo "$FIL" | cut -d/ -f 1-2)
              echo "first two folders of file: '$SUBFIL'"
              if [ -d "$SUBFIL" ]; then
                echo 'At least 1 Shiny app folder was altered. Returning early'
                exit 0
              fi
            fi
          done
          echo 'No apps folders added or modified'
          exit 1

  shinytest-apps:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }}${{ matrix.shinycoreci.text }} (${{ matrix.r }})

    needs:
      - pre_check

    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        shinycoreci:
        - { branch: "master", text: ""}
        # - { branch: "CRAN", text: "-CRAN"}
        r:
          - "4.0"
          - "3.6"
          - "3.5"
          - "3.4"
        config:
        - { os: macOS-latest }
        - { os: windows-latest }
        - { os: ubuntu-18.04, rspm: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest", release: bionic }
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_PAT }}

    steps:
      - name: Create short sha
        id: short_sha
        shell: bash
        run: |
          SHA="${{github.event.pull_request.head.sha}}${{ github.sha }}"
          echo "::set-output name=sha::${SHA:0:7}"

      - name: Notify slack INSTALL
        uses: voxmedia/github-action-slack-notify-build@v1
        if: success()
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          status: INSTALL (${{ steps.short_sha.outputs.sha }} ${{ matrix.config.os }} - ${{ matrix.r }})
          color: warning

      - name: Windows git setup
        if: runner.os == 'Windows'
        run:
          git config --global core.autocrlf false

      - name: GitHub Pull (PR)
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          # check out the commit sha, not the merged sha. Avoids the "Merge SHA_A into SHA_B" into commits
          ref: ${{ github.event.pull_request.head.sha }}      # # Ref: https://github.com/actions/checkout/pull/115/files#diff-04c6e90faac2675aa89e2176d2eec7d8R203-R209
          fetch-depth: 0
      - name: GitHub Pull (Branch)
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Collect changed file names
        if: github.event_name == 'pull_request'
        id: files_changed
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'

      - uses: r-lib/actions/setup-pandoc@master

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.r }}
      - name: R Options
        shell: bash
        run: |
          echo 'MAKEFLAGS=-j2' >> .Renviron

      - name: Create cache ID from time
        id: cache_id
        run: |
          echo "::set-output name=value::$(Rscript -e 'cat(as.numeric(Sys.time()))')"
      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.r }}${{ matrix.shinycoreci.text }}-libs-2-runtests-${{ steps.cache_id.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-r-${{ matrix.r }}${{ matrix.shinycoreci.text }}-libs-2-runtests-

      - name: Install curl
        if: runner.os == 'Linux'
        run: |
          sudo -s apt-get update
          sudo -s apt-get install -y libcurl4-openssl-dev
          Rscript -e "options(install.packages.check.source = 'no'); if (system.file(package = 'curl') == '') install.packages('curl', repos = 'https://cloud.r-project.org')"

      - name: Install openssl/curl on Windows
        if: runner.os == 'Windows'
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          install.packages(c('openssl', 'curl'), type = 'binary', repos = 'https://cloud.r-project.org')

      # make sure this is the latest
      - name: Install Rcpp
        if: runner.os == 'macOS'
        shell: Rscript {0}
        run: |
          if (system.file(package = 'Rcpp') == '') install.packages('Rcpp', type = 'source')
      # Install raster on R 3.4
      - name: Install raster
        if: matrix.r == '3.4'
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          if (system.file(package = 'remotes') == '') install.packages('remotes')
          if (system.file(package = 'raster') == '') remotes::install_version("raster", "3.1-5")

      - name: Install remotes and shinycoreci (no suggests)
        # if non linux, install binaries
        # make sure to get the best version number possible
        # If remotes isn't installed, install it
        # If shinytest isn't available, install the cran version to init the R library
        # install the specific branch of shinycoreci
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          if (system.file(package = 'remotes') == '') install.packages('remotes')
          remotes::install_github('rstudio/shinycoreci@${{ matrix.shinycoreci.branch }}', force = TRUE)

      # Install ragg deps
      - name: Ragg deps
        if: runner.os == 'Linux'
        run: |
          sudo -s apt-get update
          sudo -s apt-get install -y libfreetype6-dev libpng-dev libtiff5-dev

      # Install Chinese font
      - name: Install Chinese font
        if: runner.os == 'Linux'
        run: |
          sudo -s apt-get install -y fonts-wqy-zenhei

      # Install Cairo system dependencies
      - name: Mac systemdeps
        if: runner.os == 'macOS'
        run: |
          brew install --cask xquartz
          brew install cairo

      # Install all deps as we are installing from rspm
      - name: Install system dependencies
        if: runner.os == 'Linux'
        shell: Rscript {0}
        run: |
          system(print(paste0('sudo -s ', shinycoreci::rspm_all_install_scripts('./apps', release = '${{ matrix.config.release }}'))))

      # do not install apps deps, this will happen at run time
      - name: Install troublesome pkgs
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          if (system.file(package = 'ps') == '') remotes::install_cran('ps')
      - name: Install CRAN Versions
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          if (system.file(package = 'shiny') == '') remotes::install_cran(c('httr', 'callr', 'tibble', 'sessioninfo', 'testthat', 'rmarkdown', 'rsconnect', 'shinytest', 'shiny', 'htmltools', 'httpuv', 'promises', 'later', 'htmlwidgets', 'reactlog', 'fastmap', 'websocket', 'plotly', 'crosstalk', 'flexdashboard', 'pool', 'leaflet', 'leaflet.providers', 'english', 'dplyr', 'tidyr', 'gt'))
      - name: Install core packages
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          shinycoreci:::install_ci()

      # The `github.sha` value is the commit sha as if the PR was merged. :-(
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows#pull-request-event-pull_request
      # Checking for the pull request sha and then pasting it to the possibly 'merged' sha.  If master branch, only the `.sha` exists. If a PR, the PR sha exists.
      #  Either way, take the first 7 characters.
      # Found `github.event.pull_request.head.sha` example here: https://github.com/actions/checkout/commit/cab31617d857bf9e70dc35fd9e4dafe350794082#diff-04c6e90faac2675aa89e2176d2eec7d8R92
      # The webhook payload example (equivalent to `github.event.pull_request`) shows the keys `head > sha` : https://developer.github.com/v3/activity/events/types/#pullrequestevent
      - name: Create failure branch name
        id: failed_branch
        shell: Rscript {0}
        run: |
          cat('::set-output name=name::', '${{ steps.short_sha.outputs.sha }}', '${{ matrix.shinycoreci.text }}', '-', format(Sys.time(), '%Y_%m_%d_%H_%M'), sep = '')
      - name: Create GHA branch name (i.e., test run identifier)
        id: gha_branch
        shell: Rscript {0}
        run: |
          cat('::set-output name=name::gha-', '${{ steps.failed_branch.outputs.name }}', '-', '${{ matrix.r }}',  '-', '${{ runner.os }}', sep = '')

      - name: Find PhantomJS path
        id: phantomjs
        run: |
          echo "::set-output name=path::$(Rscript -e 'cat(shinytest:::phantom_paths()[[1]])')"
      - name: Cache PhantomJS
        uses: actions/cache@v1
        with:
          path: ${{ steps.phantomjs.outputs.path }}
          key: ${{ runner.os }}-phantomjs
          restore-keys: ${{ runner.os }}-phantomjs
      - name: Install PhantomJS
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          if (!shinytest::dependenciesInstalled()) shinytest::installDependencies()

      - name: Notify slack TEST
        uses: voxmedia/github-action-slack-notify-build@v1
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          status: TEST (${{ steps.short_sha.outputs.sha }} ${{ matrix.config.os }} - ${{ matrix.r }})
          color: warning

      # do not update pkgs, as they were installed above
      # do update app pkgs, as they have NOT been installed
      - name: Run tests
        timeout-minutes: 240
        env:
          # firefox needs creds to download drivers?
          # https://github.com/bonigarcia/webdrivermanager#http-response-code-403
          # https://github.com/schloerke/shinyjster/pull/42
          WDM_GITHUBTOKENNAME: ${{ github.actor }}
          WDM_GITHUBTOKENSECRET: ${{ secrets.GITHUB_TOKEN }}
        shell: Rscript {0}
        run: |
          options(install.packages.check.source = 'no')
          dir <- "apps"
          apps <- shinycoreci::apps_runtests(dir)
          is_pull_request <- isTRUE(jsonlite::parse_json("${{ github.event_name == 'pull_request' }}"))
          if (is_pull_request) {
            # reduce apps to only changed apps
            files_changed <- jsonlite::parse_json('${{ steps.files_changed.outputs.added_modified }}', simplifyVector = TRUE)
            changed_app_folders <-
              Filter(strsplit(files_changed, "/"), f = function(item) {
                identical(item[[1]], "apps") &&
                dir.exists(file.path(item[[1]], item[[2]]))
              })
            unique_changed_apps <- unique(unlist(lapply(changed_app_folders, `[[`, 2)))
            apps <- apps[apps %in% unique_changed_apps]
            cat("Only checking changed apps:\n", paste0("* ", apps, "\n"))
            if (length(apps) == 0) stop("No apps to check")
          }
          run_tests_output <- shinycoreci::test_runtests(
            dir = dir,
            apps = apps,
            retries = 1,
            assert = FALSE,
            update_pkgs = FALSE,
            update_app_pkgs = TRUE
          )
          shinycoreci::save_test_results(run_tests_output, gha_branch_name = '${{steps.gha_branch.outputs.name}}', pr_number = '${{github.event.pull_request.number}}', username = '${GITHUB_ACTOR}')
          shinycoreci::assert_runtests(run_tests_output)

      - name: Remove R options file
        if: always()
        shell: bash
        run: |
          rm .Renviron || echo "No .Renviron file to remove"

      - name: Git config
        if: always()
        shell: bash
        # set local email to actor
        # set local name to actor
        # set to merge when pulling (used for test results)
        # need to unset the extra header to allow for regular https push
        # display config
        run: |

          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com" && \
            git config --local user.name "${GITHUB_ACTOR}" && \
            git config --local pull.rebase false && \
            git config --local --unset http.https://github.com/.extraheader && \
            git config --local --list

      - name: Push test files to rstudio/shinycoreci-apps
        if: always()
        shell: bash
        # git checkout -B -- Creates the branch <new_branch> and start it at <start_point>; if it already exists, then reset it to <start_point>.
        # git push --force -- JUST in case the prior branch existed
        run: |
          git checkout -B ${{ steps.gha_branch.outputs.name }}

          git add zzz_shinycoreci && \
            git commit -m '`test_runtests()` output - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}' || \
            echo "No test_runtests() changes to commit"

          git add apps/sysinfo-* && \
            git commit -m '`sysinfo` Changes - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}' || \
            echo "No apps/sysinfo-* changes to commit"

          git add apps && \
            git commit -m '`shinytest` Changes - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}'|| \
            echo "No shinytest changes to commit"

          git log -n 4 --pretty=oneline --simplify-by-decoration

          # if any commits occured, then push to repo (compare to sha of current execution)
          echo "`git rev-list --count HEAD ^${{ steps.short_sha.outputs.sha }}`"
          if (( `git rev-list --count HEAD ^${{ steps.short_sha.outputs.sha }}` > 0 )); then
            # This branch should never exist. Force push
            git push --force https://schloerke:${{secrets.GITHUB_PAT}}@github.com/rstudio/shinycoreci-apps.git "HEAD:${{ steps.gha_branch.outputs.name }}"
          fi

      - name: Push test results to rstudio/shinycoreci-apps
        if: always()
        shell: bash
        # Add saved test results (in _test_results/) to _test_results branch
        # (this assumes the _test_results branch already exists, which was setup manually like this
        # https://stackoverflow.com/questions/34100048/github-create-empty-branch)
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git fetch origin _test_results
          git checkout _test_results --

          git status
          git add _test_results/
          git commit -m "Add test results for ${{steps.gha_branch.outputs.name}}"

          # attempt to push until success. Allow for 15 attempts
          counter=0
          git pull origin _test_results
          until git push https://schloerke:${{secrets.GITHUB_PAT}}@github.com/rstudio/shinycoreci-apps.git _test_results
          do
            # wait 5-15 seconds to avoid deadlock
            sleep $[ ($RANDOM % 10) + 5 ]s

            [[ counter -gt 15 ]] && echo "Too many attempts!" && exit 1
            ((counter++))
            echo "Push failed. Trying again. Try #$counter"

            # pull again to have the latest
            git pull origin _test_results
          done

          git checkout $CURRENT_BRANCH

      - name: Fix path for Windows caching
        if: runner.os == 'Windows'
        # This is needed because if you use the default tar at this stage,
        # C:/Rtools/bin/tar.exe, it will say that it can't find gzip.exe. So
        # we'll just set the path so that the original tar that would be
        # found, will be found.
        run: echo "C:/Program Files/Git/usr/bin" >> $GITHUB_PATH

      - name: Notify slack SUCCESS
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          status: SUCCESS (${{ steps.short_sha.outputs.sha }} ${{ matrix.config.os }} - ${{ matrix.r }})
          color: good

      - name: Notify slack FAILED
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          status: FAILED (${{ steps.short_sha.outputs.sha }} ${{ matrix.config.os }} - ${{ matrix.r }})
          color: danger
