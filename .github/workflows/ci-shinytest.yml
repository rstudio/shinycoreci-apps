name: shinytest

on:
  push:
    branches:
      - master
      - shinytest_linux
      - ghactions
  pull_request:
    branches:
      - master
  # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onschedule
  schedule:
    - cron:  '0 6 * * 0-4' # every work night at ~ midnight central time
  repository_dispatch:
    types:
      - all
      - shinytest
      - ci

jobs:
  shinytest-apps:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }}${{ matrix.shinycoreci.text }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false

      matrix:
        shinycoreci:
        - { branch: "master", text: ""}
        # - { branch: "CRAN", text: "-CRAN"}
        config:
        - { os: macOS-latest, r: '3.6', cran: "https://cloud.r-project.org", shinycoreci_branch: "master", shinycoreci_text: ""}
        - { os: windows-latest, r: '3.6', cran: "https://cloud.r-project.org", shinycoreci_branch: "master", shinycoreci_text: ""}
        - { os: ubuntu-18.04, r: '3.6', cran: "https://demo.rstudiopm.com/all/__linux__/bionic/latest", release: bionic }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}

    steps:
      - name: Windows git setup
        if: runner.os == 'Windows'
        run:
          git config --global core.autocrlf false

      - name: GitHub Pull (PR)
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          # check out the commit sha, not the merged sha. Avoids the "Merge SHA_A into SHA_B" into commits
          ref: ${{ github.event.pull_request.head.sha }}      # # Ref: https://github.com/actions/checkout/pull/115/files#diff-04c6e90faac2675aa89e2176d2eec7d8R203-R209
      - name: GitHub Pull (Branch)
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@master

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      - name: R Options
        shell: bash
        run: |
          echo 'MAKEFLAGS=-j2' >> .Renviron

      - name: Create cache ID from time
        id: cache_id
        run: |
          echo "::set-output name=value::$(Rscript -e 'cat(as.numeric(Sys.time()))')"
      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}${{ matrix.shinycoreci.text }}-libs-shinytest-${{ steps.cache_id.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-r-${{ matrix.config.r }}${{ matrix.shinycoreci.text }}-libs-shinytest-
            ${{ runner.os }}-r-${{ matrix.config.r }}${{ matrix.shinycoreci.text }}-libs-testthat-

      # remove this step once Rcpp (> 1.0.4) is uploaded
      - name: Rcpp band-aid
        run: >
          Rscript
          -e "if (system.file(package = 'Rcpp') == '') install.packages('Rcpp', repos=c('https://RcppCore.github.io/drat', '${{ matrix.config.cran }}'), type = 'source')"
      - name: Install Packages
        # if non linux, install binaries
        # make sure to get the best version number possible
        # If remotes isn't installed, install it
        # If shinytest isn't available, install the cran version to init the R library
        # install the specific branch of shinycoreci
        run: >
          Rscript
          -e "if (.Platform[['OS.type']] == 'windows' || Sys.info()[['sysname']] == 'Darwin') options(pkgType = 'binary')"
          -e "update.packages(ask = FALSE, lib.loc = .libPaths()[1])"
          -e "if (system.file(package = 'remotes') == '') install.packages('remotes')"
          -e "if (system.file(package = 'shinytest') == '') remotes::install_cran('shinytest')"
          -e "remotes::install_github('rstudio/shinycoreci@${{ matrix.shinycoreci.branch }}', dependencies = TRUE, force = TRUE)"

      # Install all deps as we are installing from rspm
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo -s apt-get update
          sudo -s apt-get install -y libcurl4-openssl-dev
          Rscript -e "install.packages('curl', repos = 'https://cloud.r-project.org')"
          Rscript -e "system(print(paste0('sudo -s ', shinycoreci::rspm_all_install_scripts('./apps', release = '${{ matrix.config.release }}'))))"


      - name: Install app deps
        run: >
          Rscript
          -e "if (.Platform[['OS.type']] == 'windows' || Sys.info()[['sysname']] == 'Darwin') options(pkgType = 'binary')"
          -e "shinycoreci::install_app_deps()"

      # The `github.sha` value is the commit sha as if the PR was merged. :-(
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows#pull-request-event-pull_request
      # Checking for the pull request sha and then pasting it to the possibly 'merged' sha.  If master branch, only the `.sha` exists. If a PR, the PR sha exists.
      #  Either way, take the first 7 characters.
      # Found `github.event.pull_request.head.sha` example here: https://github.com/actions/checkout/commit/cab31617d857bf9e70dc35fd9e4dafe350794082#diff-04c6e90faac2675aa89e2176d2eec7d8R92
      # The webhook payload example (equivalent to `github.event.pull_request`) shows the keys `head > sha` : https://developer.github.com/v3/activity/events/types/#pullrequestevent
      - name: Create short sha
        id: short_sha
        run: >
          Rscript
          -e "cat('::set-output name=sha::', substr(paste0('${{ github.event.pull_request.head.sha }}', '${{ github.sha }}'), 1, 7), sep = '')"
      - name: Create failure branch name
        id: failed_branch
        run: >
          Rscript
          -e "cat('::set-output name=name::', '${{ steps.short_sha.outputs.sha }}', '${{ matrix.shinycoreci.text }}', '-', format(Sys.time(), '%Y_%m_%d_%H_%M'), sep = '')"

      - name: Find PhantomJS path
        id: phantomjs
        run: |
          echo "::set-output name=path::$(Rscript -e 'cat(shinytest:::phantom_paths()[[1]])')"
      - name: Cache PhantomJS
        uses: actions/cache@v1
        with:
          path: ${{ steps.phantomjs.outputs.path }}
          key: ${{ runner.os }}-phantomjs
          restore-keys: ${{ runner.os }}-phantomjs
      - name: Install PhantomJS
        run: >
          Rscript
          -e "if (!shinytest::dependenciesInstalled()) shinytest::installDependencies()"

      - name: Log platform and package information
        run: Rscript -e "shinycoreci::write_sysinfo()"

      - name: Run shinytest
        timeout-minutes: 20
        run: >
          Rscript -e "shinycoreci::test_shinytest(dir = 'apps')"

      - name: Push updated files to rstudio/shinycoreci-apps
        if: always()
        shell: bash
        # need to unset the extra header to allow for regular https push
        # git checkout -B -- Creates the branch <new_branch> and start it at <start_point>; if it already exists, then reset it to <start_point>.
        # git push --force -- JUST in case the prior branch existed
        run: |
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com" && \
            git config --local user.name "${GITHUB_ACTOR}" && \
            git config --local --unset http.https://github.com/.extraheader && \
            git config --local --list

          BRANCH="gha-${{ steps.failed_branch.outputs.name }}-${{ runner.os }}"
          git checkout -B "$BRANCH"

          git add apps/sysinfo-* && \
            git commit -m '`sysinfo` Changes - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}' || \
            echo "No apps/sysinfo-* changes to commit"

          git add . && \
            git commit -m '`shinytest` Changes - rstudio/shinycoreci@${{ steps.short_sha.outputs.sha }} ${{ matrix.shinycoreci.text }}'|| \
            echo "No shinytest changes to commit"

          # view log
          git log -n 4 --pretty=oneline --simplify-by-decoration

          # if any commits occured, then push to repo (compare to sha of current execution)
          echo "`git rev-list --count HEAD ^${{ steps.short_sha.outputs.sha }}`"
          if (( `git rev-list --count HEAD ^${{ steps.short_sha.outputs.sha }}` > 0 )); then
            git push --force https://schloerke:${{secrets.GITHUB_PAT}}@github.com/rstudio/shinycoreci-apps.git "HEAD:$BRANCH"
          fi


      - name: Fix path for Windows caching
        if: runner.os == 'Windows'
        # This is needed because if you use the default tar at this stage,
        # C:/Rtools/bin/tar.exe, it will say that it can't find gzip.exe. So
        # we'll just set the path so that the original tar that would be
        # found, will be found.
        run: echo "::add-path::C:/Program Files/Git/usr/bin"
